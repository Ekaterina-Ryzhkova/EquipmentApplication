@page "/addPerson"

@using System
@using System.Linq
@using EquipmentApplication.Shared
@using FluentValidation
@using static MudBlazor.CategoryTypes;

@inject NavigationManager NavigationManager
@inject MudBlazor.ISnackbar snackbar
@inject IJSRuntime JsRuntime

<MudBreadcrumbs Items="_items"></MudBreadcrumbs>

<MudCard Elevation="25" Style="max-width: 960px;">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Добавить ответственное лицо</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudForm Model="@person" @ref="@form" Validation="@(formValidator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <MudTextField @bind-Value="person.FullName"
                          For="@(() => person.FullName)"
                          Label="ФИО" />
            <MudTextField @bind-Value="person.Position"
                          For="@(() => person.Position)"
                          Label="Должность" />
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Color="Color.Primary" Size="Size.Large" Variant="Variant.Filled" OnClick="@(async () => await Submit())">Добавить</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public ResponsePerson person { get; set; } = new ResponsePerson();

    FormFluentValidator formValidator = new FormFluentValidator();
    MudForm form;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Главная", href: "/"),
        new BreadcrumbItem("Ответственные лица", href: "person"),
        new BreadcrumbItem("Добавить", href: null, disabled: true)
    };

    public class FormFluentValidator : AbstractValidator<ResponsePerson>
    {
        public FormFluentValidator()
        {
            RuleFor(x => x.FullName)
                .NotEmpty().WithMessage("Поле должно быть заполнено")
                .Length(10, 100).WithMessage("Поле должно быть длиной от {MinLength} до {MaxLength} символов. Введено {TotalLength} символов.");

            RuleFor(x => x.Position)
                .NotEmpty().WithMessage("Поле должно быть заполнено")
                .Length(5, 100).WithMessage("Поле должно быть длиной от {MinLength} до {MaxLength} символов. Введено {TotalLength} символов.");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (person, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<ResponsePerson>.CreateWithOptions((ResponsePerson)person, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            if (person.Id == 0)
            {
                responsePersonService.Add(person);
                snackbar.Add("Добавлено новое ответственное лицо!", MudBlazor.Severity.Success);
            }

            person = new ResponsePerson();
            responsePersonService.GetAll();
            NavigationManager.NavigateTo("person");
        }
    }
}
