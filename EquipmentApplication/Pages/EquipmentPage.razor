@page "/equipment"

@using System
@using System.Linq
@using EquipmentApplication.Shared

@inject MudBlazor.ISnackbar snackbar
@inject IJSRuntime JsRuntime

<h3>Equipment List</h3>

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add equipment</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <EditForm OnValidSubmit="Add" Model="@equipment">
            
            <MudGrid>

                <MudItem xs="12" sm="4" md="6">
                    <MudTextField @bind-Value="equipment.InventoryId" Label="Инвентарный номер" Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4" md="6">
                    <MudTextField @bind-Value="equipment.FullName" Label="Полное наименование оборудования" Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4" md="6">
                    <MudSelect T="int" Label="Select Type" @bind-Value="equipment.TypeId">
                        @foreach(var item in types)
                        {
                            <MudSelectItem T="int" Value="@item.Id">@item.TypeName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="4" md="6">
                    <MudTextField @bind-Value="equipment.Model" Label="Модель" Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4" md="6">
                    <MudDatePicker @bind-Date="equipment.DeliveryDate" DateFormat="dd.MM.yyyy" Label="Дата ввода в эксплуатацию"></MudDatePicker>
                </MudItem>
                <MudItem xs="12" sm="4" md="6">
                    <MudTextField @bind-Value="equipment.StorageLocation" Label="Место хранения" Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4" md="6">
                    <MudTextField @bind-Value="equipment.DestinationLocation" Label="Место назначения" Variant="Variant.Text"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4" md="6">
                    <MudSelect T="int" Label="Ответственное  лицо" @bind-Value="equipment.PersonId">
                        @foreach (var item in people)
                        {
                            <MudSelectItem T="int" Value="@item.Id">@item.FullName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="4" md="6">
                    <MudTextField @bind-Value="equipment.Comment" Label="Комментарий" Variant="Variant.Text"></MudTextField>
                </MudItem>
            </MudGrid>

            <br />
            <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="Add">Добавить</MudButton>
        </EditForm>
    </MudCardContent>
</MudCard>

<br />



<MudTable RowsPerPage="5" @ref="@_table" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info" Style="color: white" Elevation="25" Items="GetAll()" Filter="new Func<Equipment,bool>(Search)" @bind-equipment="equipment">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Список ответственных лиц</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search For..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Rounded.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Equipment, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh>ИНВ.№</MudTh>
        <MudTh>Наименование</MudTh>
        <MudTh>Тип</MudTh>
        <MudTh>Модель</MudTh>
        <MudTh>Дата</MudTh>
        <MudTh>Место хранения</MudTh>
        <MudTh>Место назначения</MudTh>
        <MudTh>Ответственное лицо</MudTh>
        <MudTh>Комментарий</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Type Name">@context.Id</MudTd>
        <MudTd DataLabel="Type Name">@context.InventoryId</MudTd>
        <MudTd DataLabel="Type Name">@context.FullName</MudTd>
        <MudTd DataLabel="Type Name">@context.TypeEquipment.TypeName</MudTd>
        <MudTd DataLabel="Type Name">@context.Model</MudTd>
        <MudTd DataLabel="Type Name">@context.DeliveryDate;</MudTd>
        <MudTd DataLabel="Type Name">@context.StorageLocation</MudTd>
        <MudTd DataLabel="Type Name">@context.DestinationLocation</MudTd>
        <MudTd DataLabel="Type Name">@context.ResponsePerson.FullName</MudTd>
        <MudTd DataLabel="Type Name">@context.Comment</MudTd>
        <MudTd DataLabel="Actions">
            <MudFab OnClick="@(() => Update(context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"></MudFab>
            <MudFab OnClick="@(() => Delete(context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"></MudFab>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudPagination ShowFirstButton="true" ShowLastButton="true" SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
    </PagerContent>
</MudTable>

@code {
    private string searchString = "";

    private Equipment equipment = new Equipment()
        {
            DeliveryDate = DateTime.Today
    };
    private ResponsePerson person = new ResponsePerson();
    private TypeEquipment type = new TypeEquipment();

    private List<Equipment> equipments = new List<Equipment>();
    private List<ResponsePerson> people = new List<ResponsePerson>();
    private List<TypeEquipment> types = new List<TypeEquipment>();

    protected override async Task OnInitializedAsync()
    {
        people = responsePersonService.GetAll();
        types = typeEquipmentService.GetAll();
        equipments = equipmentService.GetAll();
    }

    private bool Search(Equipment equip)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (equip.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase) 
        || equip.StorageLocation.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        || equip.DestinationLocation.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        || equip.InventoryId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private List<Equipment> GetAll()
    {
        equipments = equipmentService.GetAll();

        return equipments;
    }

    private void Add()
    {
        if (equipment.Id == 0)
        {
            equipmentService.Add(equipment);
            snackbar.Add("Добавлено новое оборудование.",
            Severity.Success);
        }
        else
        {
            equipmentService.Update(equipment);
            snackbar.Add("Данные об оборудовании изменены.",
            Severity.Success);
        }

        equipment = new Equipment();
        GetAll();
    }

    private void Update(Equipment equip)
    {
        equipment = equip;
        StateHasChanged();
    }

    private void Delete(Equipment equipment)
    {
        equipmentService.Delete(equipment);
        snackbar.Add("Оборудование удалено.",
    Severity.Success);
        GetAll();
    }

    private MudTable<Equipment> _table;

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
}