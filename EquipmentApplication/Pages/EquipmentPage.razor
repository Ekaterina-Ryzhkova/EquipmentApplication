@page "/equipment"

@using System
@using System.Linq
@using EquipmentApplication.Shared
@using System.Security.Claims
@using static MudBlazor.CategoryTypes;

@inject MudBlazor.ISnackbar snackbar
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime

<MudBreadcrumbs Items="_items"></MudBreadcrumbs>

<MudDataGrid T="Equipment" MultiSelection="true" Items="@equipments" QuickFilter="@_quickFilter" SortMode="SortMode.Single" Filterable="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Список оборудования</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Искать..." Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="Equipment" />
        <Column T="Equipment" Field="Id" Title="Id" Filterable="false" />
        <Column T="Equipment" Field="InventoryId" Title="Инвентарный номер" Sortable="false" Filterable="false" />
        <Column T="Equipment" Field="TypeId" Title="Тип">
            <CellTemplate>
                @context.Item.TypeEquipment.TypeName
            </CellTemplate>
        </Column>
        <Column T="Equipment" Field="DeliveryDate" Title="Дата">
            <CellTemplate>
                @DeleteZeroNumbersToReturnDate(@context.Item.DeliveryDate).ToString("d")
            </CellTemplate>
        </Column>
        <Column T="Equipment" Field="PersonId" Title="Ответственное лицо">
            <CellTemplate>
                @context.Item.ResponsePerson.FullName
            </CellTemplate>
        </Column>
        @if (claims.Count() > 0)
        {
            <Column T="Equipment" Title="Действия" StickyRight="true" Sortable="false" Filterable="false">
                <CellTemplate>
                    <MudIconButton OnClick="@(() => OpenUpdateDialog(@context.Item))" Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" />
                    <MudIconButton OnClick="@(() => Delete(@context.Item))" Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" />
                </CellTemplate>
            </Column>
        }
    </Columns>
    <ChildRowContent>
        <MudCard>
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudAvatar Color="Color.Secondary">I</MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@context.Item.FullName</MudText>
                    <MudText Typo="Typo.body1">Модель: @context.Item.Model</MudText>
                    <MudText Typo="Typo.body2">№@context.Item.InventoryId</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.body1">Дата: <b>@DeleteZeroNumbersToReturnDate(@context.Item.DeliveryDate).ToString("d")</b></MudText>
                <MudText Typo="Typo.body1">Место хранения: <b>@context.Item.StorageLocation</b></MudText>
                <MudText Typo="Typo.body1">Место назначения: <b>@context.Item.DestinationLocation</b></MudText>
                <MudTextField @bind-Value="@context.Item.Comment" Variant="Variant.Outlined" Label="Комментарий" Disabled="true" />
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
    <PagerContent>
        <MudDataGridPager T="Equipment" />
    </PagerContent>
</MudDataGrid>

<AuthorizeView>
    <Authorized>
        <MudButton Href="addEquipment"
                   Variant="Variant.Filled"
                   EndIcon="@Icons.Material.Filled.Add"
                   Color="Color.Primary"
                   Class="pa-3 mt-4">
            Добавить
        </MudButton>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private string _searchString;

    private Equipment equipment = new Equipment();
    private ResponsePerson person = new ResponsePerson();
    private TypeEquipment type = new TypeEquipment();

    private List<Equipment> equipments = new List<Equipment>();
    private List<ResponsePerson> people = new List<ResponsePerson>();
    private List<TypeEquipment> types = new List<TypeEquipment>();

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Главная", href: "/"),
        new BreadcrumbItem("Оборудование", href: null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        people = responsePersonService.GetAll();
        types = typeEquipmentService.GetAll();
        equipments = equipmentService.GetAll();

        if (authenticationState is not null)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                claims = user.Claims;
            }            
        }

    }

    private Func<Equipment, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.InventoryId.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private DateTime DeleteZeroNumbersToReturnDate(DateTime? time)
    {
        string[] words = time.ToString().Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        DateTime myDate = DateTime.ParseExact(words[0], "dd.MM.yyyy", System.Globalization.CultureInfo.InvariantCulture);
        return myDate;
    }

    private List<Equipment> GetAll()
    {
        equipments = equipmentService.GetAll();

        return equipments;
    }

    async Task OpenUpdateDialog(Equipment equipment)
    {
        var parameters = new DialogParameters { ["equipment"] = equipment, ["types"] = types, ["people"] = people };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = await DialogService.ShowAsync<UpdateDialog>("Update Data", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            GetAll();
        }
    }

    private void Delete(Equipment equipment)
    {
        equipmentService.Delete(equipment);
        snackbar.Add("Оборудование удалено.",
    Severity.Success);
        GetAll();
    }

    private MudTable<Equipment> _table;

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
}