@page "/graph"

@using Blazorise.Charts
@using Blazorise

<Heading Size="HeadingSize.Is2">Количество заявок по дате</Heading>
<MudGrid Style="max-width: 1230px;">
    <MudItem xs="6">
        <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full py-8">
            <MudDatePicker Label="Basic example" @bind-Date="date1" Placeholder="Select Date" />
        </MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Elevation="0" Class="d-flex align-center justify-center mud-width-full py-8">
            <MudDatePicker Label="Basic example" @bind-Date="date2" Placeholder="Select Date" />
        </MudPaper>
    </MudItem>
</MudGrid>

<LineChart @ref="lineChart" TItem="WatcherEvent" Options="@lineChartOptions" />

@code {
    private LineChart<WatcherEvent> lineChart;

    private Equipment equipment = new Equipment();
    private TypeEquipment type = new TypeEquipment();
    private List<Equipment> equipments = new List<Equipment>();
    private List<TypeEquipment> types = new List<TypeEquipment>();

    private int value { get; set; } = 0;
    private IEnumerable<int> options { get; set; } = new HashSet<int>();

    DateTime? date1 = null;
    DateTime? date2 = null;

    protected override async Task OnInitializedAsync()
    {
        equipments = equipmentService.GetAll();
        types = typeEquipmentService.GetAll();
    }

    LineChartOptions lineChartOptions = new()
        {
            Parsing = new ChartParsing
            {
                XAxisKey = "sector",
                YAxisKey = "count",
            },
            Scales = new ChartScales
            {
                Y = new ChartAxis
                {
                    Type = "linear",
                    Ticks = new()
                    {
                        StepSize = 1
                    }
                }
            },
            Responsive = true,
            Plugins = new()
            {
                Title = new()
                {
                    Display = false
                }  
            }
        };

    private List<string> backgroundColors = new() { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    private List<string> borderColors = new() { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    private bool isAlreadyInitialised;

    public class WatcherEvent
    {
        public string Sector { get; set; }

        public int Count { get; set; }

        public DateTime Date { get; } = DateTime.Now;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isAlreadyInitialised)
        {
            isAlreadyInitialised = true;

            await lineChart.Clear();
            await lineChart.AddDataSet(GetLineChartDataset());
        }
        else
        {
            await lineChart.Clear();
            await lineChart.AddDatasetsAndUpdate(GetLineChartDataset());
        }
    }

    private LineChartDataset<WatcherEvent> GetLineChartDataset()
    {
        return new()
            {
                Label = "Count",
                Data = getList(date1, date2),
                BackgroundColor = backgroundColors[0], // line chart can only have one color
                BorderColor = borderColors[0],
                Fill = true,
                PointRadius = 3,
                BorderWidth = 1,
                PointBorderColor = Enumerable.Repeat(borderColors.First(), 6).ToList(),
                CubicInterpolationMode = "default",
            };
    }

    public List<WatcherEvent> getList(DateTime? date1, DateTime? date2)
    {
        IEnumerable<WatcherEvent> datalist = new List<WatcherEvent>();

        if (!(date1 == null) & (date2 == null))
        {
            datalist = from c in equipments
                       orderby c.DeliveryDate
                       where ((c.DeliveryDate >= date1 && c.DeliveryDate <= DateTime.Now))
                       select new WatcherEvent
                           {
                               Sector = ConvertToDateTime(c.DeliveryDate).ToString("d"),
                               Count = CountMove(ConvertToDateTime(c.DeliveryDate))
                           };
        }

        else if (!(date1 == null & date2 == null))
        {
                datalist = from c in equipments
                           orderby c.DeliveryDate
                           where (c.DeliveryDate >= date1 && c.DeliveryDate <= date2)
                           select new WatcherEvent
                               {
                                   Sector = ConvertToDateTime(c.DeliveryDate).ToString("d"),
                                   Count = CountMove(ConvertToDateTime(c.DeliveryDate))
                               };
        }

        else
        {
                datalist = from c in equipments
                           orderby c.DeliveryDate
                           select new WatcherEvent
                               {
                                   Sector = ConvertToDateTime(c.DeliveryDate).ToString("d"),
                                   Count = CountMove(ConvertToDateTime(c.DeliveryDate))
                               };
        }

        return datalist.ToList();
    }

    public int CountMove(DateTime date)
    {
        int query = (from c in equipments
                     where c.DeliveryDate == date
                     select c).Count();
        return query;
    }

    private static DateTime ConvertToDateTime(DateTime? value)
    {
        DateTime convertedDate;
        convertedDate = Convert.ToDateTime(value);
        return convertedDate;
    }
}