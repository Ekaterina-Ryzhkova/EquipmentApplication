@page "/type"

@using System
@using System.Linq
@using EquipmentApplication.Shared
@using System.Security.Claims
@using static MudBlazor.CategoryTypes;

@inject MudBlazor.ISnackbar snackbar
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime

<MudBreadcrumbs Items="_items"></MudBreadcrumbs>

<MudTable Items="GetAll()" Filter="new Func<TypeEquipment,bool>(Search)" @bind-type="type">
    <ColGroup>
        <col style="width:180px;" />
        <col />
        @if (claims.Count() > 0)
        {
            <col style="width:125px;" />
        }
    </ColGroup>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Список типов оборудования</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Искать..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<TypeEquipment, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<TypeEquipment, object>(x=>x.TypeName)">Тип оборудования</MudTableSortLabel></MudTh>
        @if (claims.Count() > 0)
        {  
            <MudTh>Действия</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Type Name">@context.Id</MudTd>
        <MudTd DataLabel="Type Name">@context.TypeName</MudTd>
        @if (claims.Count() > 0)
        {
            <MudTd DataLabel="Actions">
                <MudIconButton OnClick="@(() => OpenUpdateDialog(context))" Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small"></MudIconButton>
                <MudIconButton OnClick="@(() => Delete(context))" Icon="@Icons.Material.Outlined.Delete" Size="Size.Small"></MudIconButton>
            </MudTd>
        }
    </RowTemplate>
</MudTable>

<AuthorizeView>
    <Authorized>
        <MudButton Href="addType"
                   Variant="Variant.Filled"
                   EndIcon="@Icons.Material.Filled.Add"
                   Color="Color.Primary"
                   Class="pa-3 mt-4">
            Добавить
        </MudButton>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private string searchString = "";
    private TypeEquipment type = new TypeEquipment();
    private List<TypeEquipment> typeequipments = new List<TypeEquipment>();

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Главная", href: "/"),
        new BreadcrumbItem("Типы оборудования", href: null, disabled: true)
    };

    protected override async Task OnInitializedAsync()
    {
        typeequipments = typeEquipmentService.GetAll();

        if (authenticationState is not null)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                claims = user.Claims;
            }
        }
    }


    private bool Search(TypeEquipment typeEquipment)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (typeEquipment.TypeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private List<TypeEquipment> GetAll()
    {
        typeequipments = typeEquipmentService.GetAll();

        return typeequipments;
    }

    async Task OpenUpdateDialog(TypeEquipment type)
    {
        var parameters = new DialogParameters { ["type"] = type };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var dialog = await DialogService.ShowAsync<UpdateDataTypeDialog>("Update Data Type", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            GetAll();
        }
    }



    private void Update(TypeEquipment Typeequip)
    {
        type = Typeequip;
        StateHasChanged();
    }

    private async Task Delete(TypeEquipment Typeequip)
    {
        typeEquipmentService.Delete(Typeequip);
        snackbar.Add("Тип оборудования удален.",
    Severity.Success);
        GetAll();
    }
}
